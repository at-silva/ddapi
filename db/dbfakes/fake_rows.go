// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/at-silva/ddapi/db"
)

type FakeRows struct {
	MapScanStub        func(map[string]interface{}) error
	mapScanMutex       sync.RWMutex
	mapScanArgsForCall []struct {
		arg1 map[string]interface{}
	}
	mapScanReturns struct {
		result1 error
	}
	mapScanReturnsOnCall map[int]struct {
		result1 error
	}
	NextStub        func() bool
	nextMutex       sync.RWMutex
	nextArgsForCall []struct {
	}
	nextReturns struct {
		result1 bool
	}
	nextReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRows) MapScan(arg1 map[string]interface{}) error {
	fake.mapScanMutex.Lock()
	ret, specificReturn := fake.mapScanReturnsOnCall[len(fake.mapScanArgsForCall)]
	fake.mapScanArgsForCall = append(fake.mapScanArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	stub := fake.MapScanStub
	fakeReturns := fake.mapScanReturns
	fake.recordInvocation("MapScan", []interface{}{arg1})
	fake.mapScanMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) MapScanCallCount() int {
	fake.mapScanMutex.RLock()
	defer fake.mapScanMutex.RUnlock()
	return len(fake.mapScanArgsForCall)
}

func (fake *FakeRows) MapScanCalls(stub func(map[string]interface{}) error) {
	fake.mapScanMutex.Lock()
	defer fake.mapScanMutex.Unlock()
	fake.MapScanStub = stub
}

func (fake *FakeRows) MapScanArgsForCall(i int) map[string]interface{} {
	fake.mapScanMutex.RLock()
	defer fake.mapScanMutex.RUnlock()
	argsForCall := fake.mapScanArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRows) MapScanReturns(result1 error) {
	fake.mapScanMutex.Lock()
	defer fake.mapScanMutex.Unlock()
	fake.MapScanStub = nil
	fake.mapScanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) MapScanReturnsOnCall(i int, result1 error) {
	fake.mapScanMutex.Lock()
	defer fake.mapScanMutex.Unlock()
	fake.MapScanStub = nil
	if fake.mapScanReturnsOnCall == nil {
		fake.mapScanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mapScanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRows) Next() bool {
	fake.nextMutex.Lock()
	ret, specificReturn := fake.nextReturnsOnCall[len(fake.nextArgsForCall)]
	fake.nextArgsForCall = append(fake.nextArgsForCall, struct {
	}{})
	stub := fake.NextStub
	fakeReturns := fake.nextReturns
	fake.recordInvocation("Next", []interface{}{})
	fake.nextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRows) NextCallCount() int {
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	return len(fake.nextArgsForCall)
}

func (fake *FakeRows) NextCalls(stub func() bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = stub
}

func (fake *FakeRows) NextReturns(result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	fake.nextReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRows) NextReturnsOnCall(i int, result1 bool) {
	fake.nextMutex.Lock()
	defer fake.nextMutex.Unlock()
	fake.NextStub = nil
	if fake.nextReturnsOnCall == nil {
		fake.nextReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.nextReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeRows) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mapScanMutex.RLock()
	defer fake.mapScanMutex.RUnlock()
	fake.nextMutex.RLock()
	defer fake.nextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRows) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.Rows = new(FakeRows)
