// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"database/sql"
	"sync"

	"github.com/at-silva/ddapi/db"
)

type FakeDB struct {
	NamedExecContextStub        func(context.Context, string, interface{}) (sql.Result, error)
	namedExecContextMutex       sync.RWMutex
	namedExecContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	namedExecContextReturns struct {
		result1 sql.Result
		result2 error
	}
	namedExecContextReturnsOnCall map[int]struct {
		result1 sql.Result
		result2 error
	}
	NamedQueryContextStub        func(context.Context, string, interface{}) (db.Rows, error)
	namedQueryContextMutex       sync.RWMutex
	namedQueryContextArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}
	namedQueryContextReturns struct {
		result1 db.Rows
		result2 error
	}
	namedQueryContextReturnsOnCall map[int]struct {
		result1 db.Rows
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDB) NamedExecContext(arg1 context.Context, arg2 string, arg3 interface{}) (sql.Result, error) {
	fake.namedExecContextMutex.Lock()
	ret, specificReturn := fake.namedExecContextReturnsOnCall[len(fake.namedExecContextArgsForCall)]
	fake.namedExecContextArgsForCall = append(fake.namedExecContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.NamedExecContextStub
	fakeReturns := fake.namedExecContextReturns
	fake.recordInvocation("NamedExecContext", []interface{}{arg1, arg2, arg3})
	fake.namedExecContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) NamedExecContextCallCount() int {
	fake.namedExecContextMutex.RLock()
	defer fake.namedExecContextMutex.RUnlock()
	return len(fake.namedExecContextArgsForCall)
}

func (fake *FakeDB) NamedExecContextCalls(stub func(context.Context, string, interface{}) (sql.Result, error)) {
	fake.namedExecContextMutex.Lock()
	defer fake.namedExecContextMutex.Unlock()
	fake.NamedExecContextStub = stub
}

func (fake *FakeDB) NamedExecContextArgsForCall(i int) (context.Context, string, interface{}) {
	fake.namedExecContextMutex.RLock()
	defer fake.namedExecContextMutex.RUnlock()
	argsForCall := fake.namedExecContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDB) NamedExecContextReturns(result1 sql.Result, result2 error) {
	fake.namedExecContextMutex.Lock()
	defer fake.namedExecContextMutex.Unlock()
	fake.NamedExecContextStub = nil
	fake.namedExecContextReturns = struct {
		result1 sql.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) NamedExecContextReturnsOnCall(i int, result1 sql.Result, result2 error) {
	fake.namedExecContextMutex.Lock()
	defer fake.namedExecContextMutex.Unlock()
	fake.NamedExecContextStub = nil
	if fake.namedExecContextReturnsOnCall == nil {
		fake.namedExecContextReturnsOnCall = make(map[int]struct {
			result1 sql.Result
			result2 error
		})
	}
	fake.namedExecContextReturnsOnCall[i] = struct {
		result1 sql.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) NamedQueryContext(arg1 context.Context, arg2 string, arg3 interface{}) (db.Rows, error) {
	fake.namedQueryContextMutex.Lock()
	ret, specificReturn := fake.namedQueryContextReturnsOnCall[len(fake.namedQueryContextArgsForCall)]
	fake.namedQueryContextArgsForCall = append(fake.namedQueryContextArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.NamedQueryContextStub
	fakeReturns := fake.namedQueryContextReturns
	fake.recordInvocation("NamedQueryContext", []interface{}{arg1, arg2, arg3})
	fake.namedQueryContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) NamedQueryContextCallCount() int {
	fake.namedQueryContextMutex.RLock()
	defer fake.namedQueryContextMutex.RUnlock()
	return len(fake.namedQueryContextArgsForCall)
}

func (fake *FakeDB) NamedQueryContextCalls(stub func(context.Context, string, interface{}) (db.Rows, error)) {
	fake.namedQueryContextMutex.Lock()
	defer fake.namedQueryContextMutex.Unlock()
	fake.NamedQueryContextStub = stub
}

func (fake *FakeDB) NamedQueryContextArgsForCall(i int) (context.Context, string, interface{}) {
	fake.namedQueryContextMutex.RLock()
	defer fake.namedQueryContextMutex.RUnlock()
	argsForCall := fake.namedQueryContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDB) NamedQueryContextReturns(result1 db.Rows, result2 error) {
	fake.namedQueryContextMutex.Lock()
	defer fake.namedQueryContextMutex.Unlock()
	fake.NamedQueryContextStub = nil
	fake.namedQueryContextReturns = struct {
		result1 db.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) NamedQueryContextReturnsOnCall(i int, result1 db.Rows, result2 error) {
	fake.namedQueryContextMutex.Lock()
	defer fake.namedQueryContextMutex.Unlock()
	fake.NamedQueryContextStub = nil
	if fake.namedQueryContextReturnsOnCall == nil {
		fake.namedQueryContextReturnsOnCall = make(map[int]struct {
			result1 db.Rows
			result2 error
		})
	}
	fake.namedQueryContextReturnsOnCall[i] = struct {
		result1 db.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.namedExecContextMutex.RLock()
	defer fake.namedExecContextMutex.RUnlock()
	fake.namedQueryContextMutex.RLock()
	defer fake.namedQueryContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DB = new(FakeDB)
