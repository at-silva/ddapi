// Code generated by counterfeiter. DO NOT EDIT.
package sessionfakes

import (
	"sync"

	"github.com/at-silva/ddapi/session"
)

type FakeReader struct {
	CopyStub        func(string, map[string]interface{}) error
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	copyReturns struct {
		result1 error
	}
	copyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) Copy(arg1 string, arg2 map[string]interface{}) error {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	stub := fake.CopyStub
	fakeReturns := fake.copyReturns
	fake.recordInvocation("Copy", []interface{}{arg1, arg2})
	fake.copyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeReader) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeReader) CopyCalls(stub func(string, map[string]interface{}) error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = stub
}

func (fake *FakeReader) CopyArgsForCall(i int) (string, map[string]interface{}) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	argsForCall := fake.copyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReader) CopyReturns(result1 error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReader) CopyReturnsOnCall(i int, result1 error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ session.Reader = new(FakeReader)
